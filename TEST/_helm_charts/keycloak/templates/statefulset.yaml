{{- $highAvailability := gt (int .Values.keycloak.replicas) 1 -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "keycloak.fullname" . }}
  annotations:
    checksum/config: {{ include (print .Template.BasePath "/configmap.yaml") . | sha256sum }}
  labels:
    app: {{ template "keycloak.name" . }}
    chart: {{ template "keycloak.chart" . }}
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  selector:
    matchLabels:
      app: {{ template "keycloak.name" . }}
      release: "{{ .Release.Name }}"
  replicas: {{ .Values.keycloak.replicas }}
  serviceName: {{ template "keycloak.fullname" . }}-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ template "keycloak.name" . }}
        release: "{{ .Release.Name }}"
{{- if .Values.keycloak.podAnnotations }}
      annotations:
{{ toYaml .Values.keycloak.podAnnotations | indent 8 }}
{{- end }}
    spec:
      securityContext:
{{ toYaml .Values.keycloak.securityContext | indent 8 }}
    {{- with .Values.keycloak.image.pullSecrets }}
      imagePullSecrets:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- if or .Values.keycloak.persistence.deployPostgres .Values.keycloak.extraInitContainers }}
      initContainers:
      {{- if .Values.keycloak.persistence.deployPostgres }}
        - name: wait-for-postgresql
          image: "{{ .Values.init.image.repository }}:{{ .Values.init.image.tag }}"
          imagePullPolicy: {{ .Values.init.image.pullPolicy }}
          command:
            - sh
            - -c
            - |
              until printf "." && nc -z -w 2 {{ template "keycloak.postgresql.fullname" . }} {{ .Values.postgresql.service.port }}; do
                  sleep 2;
              done;

              echo 'PostgreSQL OK âœ“'
      {{- end }}
      {{- if .Values.keycloak.extraInitContainers }}
{{ tpl .Values.keycloak.extraInitContainers . | indent 8 }}
      {{- end }}
    {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.keycloak.image.repository }}:{{ .Values.keycloak.image.tag }}"
          imagePullPolicy: {{ .Values.keycloak.image.pullPolicy }}
          command: ["/bin/bash", "-c", "python /opt/jboss/keycloak/setup/render-realm.py && /scripts/keycloak.sh"]
          env:
          {{- if .Release.IsInstall }}
            - name: REALM_INIT
              value: "REALM_NAME: {{ .Values.realmInit.realmName }} | 
                      CLIENT_NAME: {{ .Values.realmInit.client.name }} | 
                      CLIENT_REDIRECT_URIS: {{ .Values.realmInit.client.redirectUris }} |
                      EVENTS_LISTENERS: {{ .Values.realmInit.events.listeners }} |
                      LDAP_ENABLED: {{ .Values.realmInit.ldap.enabled }} |
                      LDAP_PROVIDER_NAME: {{ .Values.realmInit.ldap.providerName }} |
                      LDAP_EDIT_MODE: {{ .Values.realmInit.ldap.editMode }} |
                      LDAP_USER_OBJ_CLASSES: {{ .Values.realmInit.ldap.userObjectClasses }} |
                      LDAP_CONN_URL: {{ .Values.realmInit.ldap.connectionUrl }} |
                      LDAP_USER_DN: {{ .Values.realmInit.ldap.userDn }} |
                      LDAP_BIND_DN: {{ .Values.realmInit.ldap.bindDn }} |
                      LDAP_BIND_CREDENTIALS: {{ .Values.realmInit.ldap.bindCredentials }} |
                      LDAP_SYNC_BATCH_SIZE: {{ .Values.realmInit.ldap.syncBatchSize }} |
                      LDAP_FULL_SYNC_PERIOD: {{ .Values.realmInit.ldap.fullSyncPeriod }} |
                      LDAP_CHANGED_USR_SYNC_PERIOD: {{ .Values.realmInit.ldap.changedUserSyncPeriod }}"
                      
            - name: KEYCLOAK_USER
              value: {{ .Values.keycloak.username }}
            - name: KEYCLOAK_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "keycloak.fullname" . }}-http
                  key: password
          {{- end }}
          {{- if $highAvailability }}
            - name: JGROUPS_DISCOVERY_PROTOCOL
              value: "dns.DNS_PING"
            - name: JGROUPS_DISCOVERY_PROPERTIES
              value: "dns_query={{ template "keycloak.fullname" . }}-headless.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}"
          {{- end }}
{{ include "keycloak.dbEnvVars" . | indent 12 }}
{{- with .Values.keycloak.extraEnv }}
{{ tpl . $ | indent 12 }}
{{- end }}
          volumeMounts:
            - name: scripts
              mountPath: /scripts
{{- with .Values.keycloak.extraVolumeMounts }}
{{ tpl . $ | indent 12 }}
{{- end }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /{{ .Values.keycloak.basepath }}/
              port: http
            initialDelaySeconds: {{ .Values.keycloak.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.keycloak.livenessProbe.timeoutSeconds }}
          readinessProbe:
            httpGet:
              path: /{{ .Values.keycloak.basepath }}/
              port: http
            initialDelaySeconds: {{ .Values.keycloak.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.keycloak.readinessProbe.timeoutSeconds }}
          resources:
{{ toYaml .Values.keycloak.resources | indent 12 }}
{{- with .Values.keycloak.extraContainers }}
{{ tpl . $ | indent 8 }}
{{- end }}
    {{- with .Values.keycloak.affinity }}
      affinity:
{{ tpl . $ | indent 8 }}
    {{- end }}
    {{- with .Values.keycloak.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.keycloak.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      terminationGracePeriodSeconds: 60
      volumes:
        - name: scripts
          configMap:
            name: {{ template "keycloak.fullname" . }}
            defaultMode: 0555
{{- with .Values.keycloak.extraVolumes }}
{{ tpl . $ | indent 8 }}
{{- end }}
